// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// Necessary for Next auth
model Account {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text // Add @db.Text this for strings longer that 191 chars!
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String     @id @default(cuid())
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  name               String     @unique
  email              String?    @unique
  emailVerified      DateTime?
  needsWelcome       Boolean    @default(true)
  image              String?
  nativeLanguage     Language?  @default(value: en)
  accounts           Account[]
  sessions           Session[]
  responses          Response[] @relation("user")
  responsesCorrected Response[] @relation("corrector")
}

model VerificationToken {
  identifier String
  createdAt  DateTime @default(now())
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// End "Necessary for next auth"

model Response {
  id           String       @id @default(cuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  language     Language
  user         User         @relation("user", fields: [userId], references: [id], onDelete: Cascade, map: "user_fk")
  userId       String
  prompt       Prompt       @relation(fields: [promptId], references: [id], onDelete: Cascade)
  promptId     String
  audio        Audio?       @relation("audio", fields: [audioId], references: [id])
  audioId      String?      @unique
  corrections  Correction[]
  feedback     Audio?       @relation("feedback", fields: [feedbackId], references: [id])
  feedbackId   String?      @unique
  feedbackText String?
  corrector    User?        @relation("corrector", fields: [correctorId], references: [id], map: "corrector_fk")
  correctorId  String?
}

model Correction {
  id         String         @id @default(cuid())
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  audio      Audio?         @relation(fields: [audioId], references: [id])
  audioId    String?
  diff       DiffFragment[]
  response   Response       @relation(fields: [responseId], references: [id], onDelete: Cascade)
  responseId String
}

model Prompt {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  en        String
  es        String
  fr        String
  responses Response[]
}

model Audio {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  bucket      String
  key         String
  audioUrl    String?
  language    Language
  response    Response?    @relation("audio")
  feedback    Response?    @relation("feedback")
  corrections Correction[]
}

model DiffFragment {
  id           String      @id @default(cuid())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  content      String
  type         DiffType
  correction   Correction? @relation(fields: [correctionId], references: [id], onDelete: Cascade)
  correctionId String?
}

enum DiffType {
  original
  addition
  deletion
}

enum Language {
  en
  es
  fr
}
