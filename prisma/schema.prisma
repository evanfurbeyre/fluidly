// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text // Add @db.Text this for strings longer that 191 chars!
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  responses     Response[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// End "Necessary for next auth"

model Response {
  id          String       @id @default(cuid())
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  prompt      Prompt       @relation(fields: [promptId], references: [id], onDelete: Cascade)
  promptId    String
  audio       Audio?       @relation(fields: [audioId], references: [id])
  audioId     String?
  corrections Correction[]
}

model Correction {
  id         String         @id @default(cuid())
  audio      Audio          @relation(fields: [audioId], references: [id])
  audioId    String
  diff       DiffFragment[]
  response   Response       @relation(fields: [responseId], references: [id], onDelete: Cascade)
  responseId String
}

model Prompt {
  id        String     @id @default(cuid())
  prompt    String
  language  String
  responses Response[]
}

model Audio {
  id          String       @id @default(cuid())
  bucket      String
  key         String
  audioUrl    String?
  language    String
  responses   Response[]
  corrections Correction[]
}

model DiffFragment {
  id           String      @id @default(cuid())
  content      String
  type         DiffType
  correction   Correction? @relation(fields: [correctionId], references: [id], onDelete: Cascade)
  correctionId String?
}

enum DiffType {
  original
  addition
  deletion
}
